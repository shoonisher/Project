security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            user_checker: App\Security\UserChecker
            json_login:
                check_path: /api/login
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh
            logout:
                path: api_token_invalidate

        api_token_refresh:
            pattern: ^/api/token/refresh
            stateless: true
            provider: app_user_provider
            # Si un user checker est necessaire:
            # user_checker: user_checker_service_id
            refresh_jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/zeus, roles: ROLE_ADMIN }
        - { path: ^/$, roles: PUBLIC_ACCESS }
        - { path: ^/api/(login|token/refresh|password-forgotten-request|password-forgotten-new-password), roles: PUBLIC_ACCESS }
        - { path: ^/api/users, methods: POST, roles: PUBLIC_ACCESS }
        - { path: ^/api | ^/zeus | ^/hades, roles: IS_AUTHENTICATED_FULLY }
        
       

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
